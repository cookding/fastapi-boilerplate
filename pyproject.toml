[project]
name = "fastapi-boilerplate"
version = "0.1.0"
description = "FastAPI Boilerplate"
authors = [{ name = "Cook Ding Developers", email = "developer@cookding.com" }]
dependencies = [
    "aerich[toml]>=0.9.1",
    "cryptography>=45.0.7",
    "fastapi[standard]>=0.116.1",
    "json2q>=0.3.0",
    "loguru>=0.7.3",
    "punq>=0.7.0",
    "pyjwt>=2.10.1",
    "qs-codec>=1.2.3",
    "sentry-sdk[fastapi]>=2.35.2",
    "tortoise-orm[asyncpg]>=0.25.1",
]
requires-python = "==3.12.*"
readme = "README.md"
license = { text = "MIT" }

[tool.pdm]
distribution = false

[tool.pdm.scripts]
lint = { shell = """\
    set -ex
    mypy src
    ruff check src tests scripts --fix
    ruff format src tests scripts
""" }
db-up = "bash scripts/db-up.sh"
db-down = "bash scripts/db-down.sh"
migrate-dev-create.cmd = "aerich migrate"
migrate-dev-create.env = { PYTHONPATH = "./src/" }
migrate-deploy.cmd = "aerich upgrade"
migrate-deploy.env = { PYTHONPATH = "./src/" }
migrate-status.cmd = "aerich heads"
migrate-status.env = { PYTHONPATH = "./src/" }
dev.cmd = "uvicorn src.app.main:app --host=${APP_HOST} --port=${APP_PORT} --log-level=${LOG_LEVEL} --reload"
dev.env = { PYTHONPATH = "./src/" }
dev.env_file = ".env"
start.cmd = "python -m src.app.main"
start.env = { PYTHONPATH = "./src/" }
test.cmd = "pytest -r A"
test.env = { LOG_LEVEL = "error" }
test-cov.cmd = "pytest --cov-config=.coveragerc --verbosity=3 --cov=src/app --cov-branch --cov-report term-missing tests/"
test-cov.env = { LOG_LEVEL = "error" }
test-only.cmd = "pytest -r A -m only"
test-only.env = { LOG_LEVEL = "error" }
license-check = "licensecheck --zero"

[tool.pdm.dev-dependencies]
dev = [
    "anyio>=4.10.0",
    "asgi-lifespan>=2.1.0",
    "licensecheck==2025.1.0",
    "mypy>=1.17.1",
    "pytest-cov>=6.2.1",
    "pytest>=8.4.1",
    "ruff>=0.12.11",
]

[tool.mypy]
strict                      = true
follow_imports              = "silent"
ignore_missing_imports      = true
disallow_incomplete_defs    = true
disallow_untyped_defs       = true
disallow_untyped_decorators = true
enable_error_code           = "explicit-override"

[[tool.mypy.overrides]]
module              = "src.*"
warn_unused_ignores = false

[[tool.mypy.overrides]]
module             = "tests.*"
check_untyped_defs = true

[tool.ruff]
line-length    = 88
indent-width   = 4
exclude        = ["tests/fixtures"]
target-version = "py312"
src            = ["src"]

[tool.ruff.lint]
select = [
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "F401",    # unused-import
    "FAST001", # fast-api-redundant-response-model
    "FAST002", # fast-api-non-annotated-dependency
    "FAST003", # fast-api-unused-path-parameter
    "I",       # isort
    "PGH",     # pygrep-hooks
    "RUF",     # ruff
    "TID",     # flake8-tidy-imports
    "W",       # pycodestyle
    "YTT",     # flake8-2020
]
ignore = [
    "B008",   # function-call-in-default-argument
    "B018",   # useless-expression
    "B019",   # cached-instance-method
    "RUF018", # assignment-in-assert
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["pdm"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
pythonpath     = ["src"]
filterwarnings = ["ignore::DeprecationWarning"]
addopts        = ["--import-mode=importlib", "--strict-config", "--strict-markers"]
xfail_strict   = true
junit_family   = "xunit2"
testpaths      = ["tests/"]
markers        = ["only"]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "if __name__ == .__main__.:",
    "pragma: no cover",
]

[tool.licensecheck]
using  = "PEP631"
format = "simple"

[tool.aerich]
tortoise_orm = "app.main.TORTOISE_ORM"
location     = "./src/app/migrations"
src_folder   = "./src/app"
